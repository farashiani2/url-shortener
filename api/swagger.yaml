basePath: /api/
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  user.User:
    properties:
      avatar:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      is_special:
        type: boolean
      password:
        type: string
      phone_number:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  utils.RestErr:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
host: petstore.swagger.io
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /users/:
    post:
      consumes:
      - application/json
      description: create an user via username and password
      parameters:
      - description: username
        in: formData
        name: username
        required: true
        type: string
      - description: password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.RestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.RestErr'
      summary: create an user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete an user
      produces:
      - application/json
      responses:
        "200":
          description: user successfully deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.RestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.RestErr'
      summary: delete an user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.RestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.RestErr'
      summary: Show an user
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: update an user with PUT or PATCH method
      parameters:
      - description: phone_number
        in: formData
        name: phone_number
        type: string
      - description: password
        in: formData
        name: password
        type: string
      - description: email
        in: formData
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.RestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.RestErr'
      summary: update an user
      tags:
      - users
  /users/forget-password/:
    post:
      consumes:
      - multipart/form-data
      description: ForgetPassword send a token via sms or email
      parameters:
      - description: phone_number
        in: formData
        name: phone_number
        type: string
      - description: email
        in: formData
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.RestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.RestErr'
      summary: forget password
      tags:
      - users
  /users/login/:
    post:
      consumes:
      - multipart/form-data
      description: login an user
      parameters:
      - description: username
        in: formData
        name: username
        required: true
        type: string
      - description: password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.RestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.RestErr'
      summary: login an user
      tags:
      - users
  /users/logout/:
    post:
      consumes:
      - application/json
      description: logout an user
      produces:
      - application/json
      responses:
        "200":
          description: user successfully logout
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.RestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.RestErr'
      summary: logout an user
      tags:
      - users
  /users/premium/:
    get:
      consumes:
      - multipart/form-data
      description: EnableSpecialUser enable some features for users like create shorter
        link
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.RestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.RestErr'
      summary: enable premium
      tags:
      - users
  /users/reset/:
    get:
      consumes:
      - multipart/form-data
      description: ResetPassword validate token that user click on it and send a new
        password
      produces:
      - application/json
      responses:
        "200":
          description: a new password
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.RestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.RestErr'
      summary: reset password
      tags:
      - users
swagger: "2.0"
